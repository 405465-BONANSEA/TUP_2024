CI: conitnous integration
plan: Jira (Jira es un producto de software propietario para la gestión de proyectos)
code : java, git, github
build : spring y maven
test: junit y mockito
release : jenkins, github actions *


CD: continous distribution
deploy : docker - docker compose
opearate: kubernetes ( microperacion de microservicios, gestor de contededores)
monitor: log4j (lib de java), Grafana ( herramienta grafica), prometheus ( se guardan metricas en una db cuya clave principal es una fecha)
vuelve a ci con plan

*
cuadrante de agner
se usa en github actions o jenkins, yaque corre directamnete con github 
se marcan tendencias en diferentes cuadrantes son cuatro, divididos en cruz

pipeline:
tuberia, lo arma jenkins o github actions, dentro de la tuberia se dan una serie de acciones que 
modifican el programa para su ejecucion. 


Tools Setup

DataGrip, IntelliJ, Docker, todo git, sdkman, WSL 2( en windows, Windows Subsystem for Linux)

NewRelic(Traces), DataDoc(Metric), Kibana(Log), Grafana 

COMO PREGUNTAR AL CLIENTE

y hoy como lo manejan?
como te gustaria ingresar al sistema? como te gustaria que se vea?
cuales son las entradas? como se reciben?
cuales son los procesos que llevara? que estadisiticas necesitas? que graficos?
cuales serian las salidas y los medios de salidas y comunicacion?



Microservicios

Los Microservicios abarcan una funcionalidad especifica dentro de una aplicacion gigante,
permitiendo un enfoque modular y el poder desacoplarse de la misma en caso de fallas, 
afectando solo a el sector de la app que esta acoplado este microservicio, 
operan de manera independiente, comunicacion a traves de API coninterfaces de manera asincronica, 
osea devuelve la respuesta de las solicitudes hechas en simultaneo , la unica sincronizidad es la
respuesta de las apis 

*Funcionalidad Específica: Los microservicios están diseñados para proporcionar funcionalidades específicas
 dentro de una aplicación más grande, lo que permite un enfoque modular.

*Desacoplamiento: Permiten desacoplar partes de la aplicación, de modo que una falla en un microservicio 
afecte solo al sector de la aplicación al que está acoplado, sin comprometer el sistema completo.

*Operación Independiente: Cada microservicio opera de manera independiente, lo que significa que puede 
desarrollarse, desplegarse y escalarse de forma separada. Por ejemplo cada Microservicios debe tener 
su propia DB, para tener en cuenta: luego se debe ver si hay replicas de datos 

*Comunicación Asincrónica: La comunicación entre microservicios a menudo se realiza a través de APIs 
de manera asincrónica. Esto permite que las solicitudes se manejen simultáneamente sin necesidad de
 esperar a que cada una se complete antes de comenzar la siguiente.

*Sincronización en Respuestas: La sincronización principal ocurre en el momento de devolver las 
respuestas a las solicitudes hechas a través de las APIs.

*Escalabilidad Independiente: Permite hacer crecer un microservicio segun los factores a tener en cuenta
o la importancia del mismo. capacidad de escalar individualmente cada microservicio de manera autónoma, 
en lugar de escalar toda la aplicación monolítica en su conjunto. 


*Tolerancia a fallos y gestión de errores: Aspectos criticos e el desarrollo de sistamas, especialmente
en microservicios. Se basa en como actua y se recupera el sistema en situaciones inesperadas o problemas 
que pongan en riesgo al mismo.
Tolerancia a fallos:
Capacidad de un sistema de seguir fncionando y proporcionar una funcionalidad degradada o recuperarse
automaticamente 
Gestion de errores:
Se refiere a la forma en si de como el sistema maneja los errores y las excepciones
ES fundamental para brindar la correcta y significativa informacion


ETL
Extraccion Transaccion Listado?

Extraigo de varias db los datos, los proceso(mapeo), y los guardo en una tabla especifica

Particion de tablas

La partición de tablas es una técnica en bases de datos utilizada para dividir una tabla
grande en varias tablas más pequeñas, llamadas particiones, sin cambiar la estructura de la tabla original. 


MONOLITO Y MICROSERVICIOS

Monolito: Sola DB, todas las funcionalidades, todo el mismo lenguaje. Estrechamente asociados y se ejecutan
en un solo servicio, Agregar caracts es mas complejo, Aumenta el riesgo de inidsponibilidad de la app.

Microservicios: Arquitectura Hexagonal(La arquitectura hexagonal ayuda a mantener la aplicación modular y 
facilita la adaptación a cambios tecnológicos.Se centra en separar la lógica de negocio de los detalles de 
infraestructura, como bases de datos y servicios externos.), aplicaciones de forma modular y desacoplada,
diferentes lenguajes y db. La comunicacion entre equipos se dan a traves de contratos

